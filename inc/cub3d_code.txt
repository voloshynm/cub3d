#ifndef GAME_H
#define GAME_H

// Add X11 headers for Linux compatibility
#include <X11/X.h>
#include <X11/keysym.h>

# define WIDTH 1280
# define HEIGHT 720
# define BLOCK 64
# define TEX_WIDTH 64
# define TEX_HEIGHT 64
# define DEBUG 0

// Updated Linux keycodes
# define W XK_w
# define A XK_a
# define S XK_s
# define D XK_d
# define LEFT XK_Left
# define RIGHT XK_Right

# define PI 3.14159265359
# define FLOOR_COLOR 0x808080
# define CEILING_COLOR 0x87CEEB

#include "../minilibx/mlx.h"
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <math.h>
#include <string.h>

typedef struct s_player {
    float x;
    float y;
    float angle;
    bool key_up;
    bool key_down;
    bool key_left;
    bool key_right;
    bool left_rotate;
    bool right_rotate;
} t_player;

typedef struct s_game {
    void *mlx;
    void *win;
    void *img;
    char *data;
    int bpp;
    int size_line;
    int endian;
    
    void *tex_north;
    void *tex_east;
    void *tex_south;
    void *tex_west;    
    char *tex_north_data;
    char *tex_east_data;
    char *tex_south_data;
    char *tex_west_data;
    int tex_width;
    int tex_height;
    int tex_bpp;
    int tex_size_line;
    int tex_endian;
    
    t_player player;
    char **map;
    int map_width;
    int map_height;
} t_game;

// Function declarations
void init_player(t_player *player);
int key_release(int keycode, t_player *player);
int key_press(int keycode, t_player *player);
void move_player(t_player *player);
void init_game(t_game *game);
int draw_loop(t_game *game);
void clear_image(t_game *game);
void put_pixel(int x, int y, int color, t_game *game);
void load_textures(t_game *game);
void cast_ray(t_game *game, float rayAngle, int x);
void draw_textured_wall(t_game *game, int x, int side, int texX, float lineHeight);
bool touch_wall(float x, float y, t_game *game);


#endif

#include "../inc/game.h"

char **get_map(void) {
    char **map = malloc(sizeof(char *) * 11);
    map[0] = "111111111111111";
    map[1] = "100000000000001";
    map[2] = "100000000000001";
    map[3] = "100000000000001";
    map[4] = "100000000000001";
    map[5] = "100000000000001";
    map[6] = "100000000000001";
    map[7] = "100000000000001";
    map[8] = "100000000000001";
    map[9] = "111111111111111";
    map[10] = NULL;
    return map;
}

void init_player(t_player *player) {
    player->x = 2.5f * BLOCK;  // Spawn away from edges
    player->y = 2.5f * BLOCK;
    player->angle = PI / 2;  // Start facing north
    player->key_up = false;
    player->key_down = false;
    player->key_right = false;
    player->key_left = false;
    player->left_rotate = false;
    player->right_rotate = false;
}

void init_game(t_game *game) {
    init_player(&game->player);
    game->map = get_map();
    game->mlx = mlx_init();
    game->win = mlx_new_window(game->mlx, WIDTH, HEIGHT, "Assam & Max's Game");
    game->img = mlx_new_image(game->mlx, WIDTH, HEIGHT);
    game->data = mlx_get_data_addr(game->img, &game->bpp, &game->size_line, &game->endian);
    load_textures(game);
}

int draw_loop(t_game *game) {
    t_player *p = &game->player;
    move_player(p);
    clear_image(game);
    
    float fov = PI / 3;
    float rayAngle = p->angle - fov / 2;
    float angleStep = fov / WIDTH;

    for(int x = 0; x < WIDTH; x++) {
        cast_ray(game, rayAngle, x);
        rayAngle += angleStep;
    }
    
    mlx_put_image_to_window(game->mlx, game->win, game->img, 0, 0);
    return 0;
}

int main(void) {
    t_game game;
    init_game(&game);
    
    mlx_hook(game.win, 2, 1L<<0, key_press, &game.player);
    mlx_hook(game.win, 3, 1L<<1, key_release, &game.player);
    mlx_loop_hook(game.mlx, draw_loop, &game);
    
    mlx_loop(game.mlx);
    return 0;
}

#include "../inc/game.h"

void put_pixel(int x, int y, int color, t_game *game)
{
    if(x >= WIDTH || y >= HEIGHT || x < 0 || y < 0)
        return;
    
    int index = y * game->size_line + x * (game->bpp / 8);
    *(unsigned int*)(game->data + index) = mlx_get_color_value(game->mlx, color);
}


void clear_image(t_game *game) {
    for(int y = 0; y < HEIGHT; y++) {
        u_int32_t color = (y < HEIGHT/2) ? CEILING_COLOR : FLOOR_COLOR;
        for(int x = 0; x < WIDTH; x++) {
            put_pixel(x, y, color, game);
        }
    }
}

float distance(float x1, float y1, float x2, float y2) {
    return sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
}

bool touch_wall(float x, float y, t_game *game) {
    int gridX = (int)x / BLOCK;
    int gridY = (int)y / BLOCK;
    return game->map[gridY][gridX] == '1';
}

#include "../inc/game.h"

void validate_map(t_game *game) {
    int height = 0;
    int width = 0;
    
    while(game->map[height]) {
        int current_width = strlen(game->map[height]);
        if(height == 0) width = current_width;
        if(current_width != width) {
            fprintf(stderr, "Map is not rectangular!\n");
            exit(1);
        }
        height++;
    }
    game->map_width = width;
    game->map_height = height;
}

void find_valid_spawn(t_player *player, t_game *game) {
    for(int y = 1; y < game->map_height-1; y++) {
        for(int x = 1; x < game->map_width-1; x++) {
            if(game->map[y][x] == '0') {
                player->x = (x + 0.5f) * BLOCK;
                player->y = (y + 0.5f) * BLOCK;
                return;
            }
        }
    }
    fprintf(stderr, "No valid spawn found!\n");
    exit(1);
}

bool check_collision(t_game *game, float new_x, float new_y) {
    int grid_x = new_x / BLOCK;
    int grid_y = new_y / BLOCK;
    
    if(grid_x < 0 || grid_x >= game->map_width) return true;
    if(grid_y < 0 || grid_y >= game->map_height) return true;
    
    // Check current cell and adjacent cells
    for(int y = -1; y <= 1; y++) {
        for(int x = -1; x <= 1; x++) {
            int check_x = grid_x + x;
            int check_y = grid_y + y;
            if(check_x >= 0 && check_x < game->map_width &&
               check_y >= 0 && check_y < game->map_height) {
                if(game->map[check_y][check_x] == '1') {
                    float dx = fabs(new_x - (check_x * BLOCK));
                    float dy = fabs(new_y - (check_y * BLOCK));
                    if(dx < 10.0f && dy < 10.0f) return true;
                }
            }
        }
    }
    return false;
}


#include "../inc/game.h"

int key_press(int keycode, t_player *player) {
    if(keycode == W) player->key_up = true;
    if(keycode == S) player->key_down = true;
    if(keycode == A) player->key_left = true;
    if(keycode == D) player->key_right = true;
    if(keycode == LEFT) player->left_rotate = true;
    if(keycode == RIGHT) player->right_rotate = true;
    return 0;
}

int key_release(int keycode, t_player *player) {
    if(keycode == W) player->key_up = false;
    if(keycode == S) player->key_down = false;
    if(keycode == A) player->key_left = false;
    if(keycode == D) player->key_right = false;
    if(keycode == LEFT) player->left_rotate = false;
    if(keycode == RIGHT) player->right_rotate = false;
    return 0;
}

void move_player(t_player *player) {
    float speed = 3.0;
    float rotSpeed = 0.05;
    float moveStep = speed * cos(player->angle);
    float strafeStep = speed * sin(player->angle);

    if(player->left_rotate) player->angle -= rotSpeed;
    if(player->right_rotate) player->angle += rotSpeed;
    if(player->angle > 2*PI) player->angle -= 2*PI;
    if(player->angle < 0) player->angle += 2*PI;

    if(player->key_up) {
        player->x += cos(player->angle) * speed;
        player->y += sin(player->angle) * speed;
    }
    if(player->key_down) {
        player->x -= cos(player->angle) * speed;
        player->y -= sin(player->angle) * speed;
    }
    if(player->key_left) {
        player->x += strafeStep;
        player->y -= moveStep;
    }
    if(player->key_right) {
        player->x -= strafeStep;
        player->y += moveStep;
    }
}

#include "../inc/game.h"

void load_textures(t_game *game) {
    game->tex_north = mlx_xpm_file_to_image(game->mlx, "./inc/tex/w_north.xpm", 
        &game->tex_width, &game->tex_height);
    game->tex_east = mlx_xpm_file_to_image(game->mlx, "./inc/tex/w_east.xpm", 
        &game->tex_width, &game->tex_height);
    game->tex_south = mlx_xpm_file_to_image(game->mlx, "./inc/tex/w_south.xpm", 
        &game->tex_width, &game->tex_height);
    game->tex_west = mlx_xpm_file_to_image(game->mlx, "./inc/tex/w_west.xpm", 
        &game->tex_width, &game->tex_height);

    if (!game->tex_north || !game->tex_east || !game->tex_south || !game->tex_west) {
        fprintf(stderr, "Error loading textures\n");
        exit(1);
    }

    game->tex_north_data = mlx_get_data_addr(game->tex_north, &game->tex_bpp,
        &game->tex_size_line, &game->tex_endian);
    game->tex_east_data = mlx_get_data_addr(game->tex_east, &game->tex_bpp,
        &game->tex_size_line, &game->tex_endian);
    game->tex_south_data = mlx_get_data_addr(game->tex_south, &game->tex_bpp,
        &game->tex_size_line, &game->tex_endian);
    game->tex_west_data = mlx_get_data_addr(game->tex_west, &game->tex_bpp,
        &game->tex_size_line, &game->tex_endian);
}

void draw_textured_wall(t_game *game, int x, int side, int texX, float lineHeight) {
    int drawStart = (HEIGHT - lineHeight) / 2;
    int drawEnd = (HEIGHT + lineHeight) / 2;
    
    // Select correct texture based on wall orientation
    char *tex_data;
    if (side == 0) { // East/West walls
        tex_data = (game->player.angle > PI/2 && game->player.angle < 3*PI/2) 
                 ? game->tex_west_data : game->tex_east_data;
    } else { // North/South walls
        tex_data = (game->player.angle > PI) 
                 ? game->tex_south_data : game->tex_north_data;
    }

    float texStep = (float)TEX_HEIGHT / lineHeight;
    float texPos = (drawStart - HEIGHT/2 + lineHeight/2) * texStep;

    for(int y = drawStart; y < drawEnd; y++) {
        int texY = (int)texPos & (TEX_HEIGHT - 1);
        texPos += texStep;
        
        // Critical safety check
        if(texX >= 0 && texX < TEX_WIDTH && texY >= 0 && texY < TEX_HEIGHT) {
            int color = *(int*)(tex_data + 
                (texY * game->tex_size_line + texX * (game->tex_bpp/8)));
            put_pixel(x, y, color, game);
        }
    }
}

void cast_ray(t_game *game, float rayAngle, int x) {
    float rayDirX = cos(rayAngle);
    float rayDirY = sin(rayAngle);
    
    // DDA algorithm implementation
    float sideDistX, sideDistY;
    float deltaDistX = fabs(1 / rayDirX);
    float deltaDistY = fabs(1 / rayDirY);
    float perpWallDist;
    
    int mapX = (int)game->player.x / BLOCK;
    int mapY = (int)game->player.y / BLOCK;
    int stepX, stepY;
    int hit = 0;
    int side;

    // Calculate step and initial sideDist
    if(rayDirX < 0) {
        stepX = -1;
        sideDistX = (game->player.x - mapX * BLOCK) * deltaDistX;
    } else {
        stepX = 1;
        sideDistX = ((mapX + 1) * BLOCK - game->player.x) * deltaDistX;
    }
    if(rayDirY < 0) {
        stepY = -1;
        sideDistY = (game->player.y - mapY * BLOCK) * deltaDistY;
    } else {
        stepY = 1;
        sideDistY = ((mapY + 1) * BLOCK - game->player.y) * deltaDistY;
    }

    // DDA loop
    while(!hit) {
        if(sideDistX < sideDistY) {
            sideDistX += deltaDistX;
            mapX += stepX;
            side = 0;
        } else {
            sideDistY += deltaDistY;
            mapY += stepY;
            side = 1;
        }
        if(game->map[mapY][mapX] == '1') hit = 1;
    }

    // Calculate distance and line height
    if(side == 0)
        perpWallDist = (mapX * BLOCK - game->player.x + (1 - stepX) * BLOCK / 2) / rayDirX;
    else
        perpWallDist = (mapY * BLOCK - game->player.y + (1 - stepY) * BLOCK / 2) / rayDirY;
    
    float lineHeight = (BLOCK / perpWallDist) * HEIGHT;
    
    // Calculate world position for proper texture wrapping
    float wallX;
    if(side == 0) {
        wallX = game->player.y + perpWallDist * rayDirY;
    } else {
        wallX = game->player.x + perpWallDist * rayDirX;
    }
    
    // Full texture coordinate calculation with wrapping
    wallX = fmod(wallX, BLOCK) / BLOCK;  // Wrap every 64 pixels
    int texX = (int)(wallX * TEX_WIDTH);

    draw_textured_wall(game, x, side, texX, lineHeight);
}
